module main

imports
	native
	{
		io.output
		{
			say,
			sayn
		},
		chrono.delay
	}

/|
funct nextState(row,col)=
	liveNeighbors===3||(board.get(row).get(col)&&liveNeighbors===2)
	where val liveNeighbors=getLiveNeighborCount(row,col)

funct foldr(array,callback,initial_value)=foldl(<|>array,callback,initial_value)
|\

/|
funct foldl(array,callback,initial_value)=
  doif array.empty return initial_value
  var accumulator=initial_value
  for i,n|->array accumulator=callback(accumulator,n)
  return accumulator
end

funct sierpinski_carpet(n)=
	carpet=['#']
	for _,v|->[0,1..n]
	    carpet=
	    [
	        ...[x+x+x for x in carpet],
	        ...[x+x.replace("#"," ")+x for x in carpet],
	        ...[x+x+x for x in carpet]
	    ]
	return foldl(carpet,(a,b)==>a+'\n'+b,'')
end

print sierpinski_carpet(3)
|\

say("Hello, World!".replace("World","Nutt"))

end